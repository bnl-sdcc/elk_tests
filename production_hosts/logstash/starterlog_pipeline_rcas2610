input {
    beats {
        port => "5044"
    }
}

filter {

    grok {
        pattern_definitions => { "START_TIMESTAMP" => "%{DATE_US} %{TIME}" }
        match => { "message" => [
            '^%{START_TIMESTAMP:starttime} \*\* PID = ',
            '^%{START_TIMESTAMP} Submitting machine is "%{HOSTNAME:submithost}"',
            '^%{START_TIMESTAMP} Starting a VANILLA universe job with ID: %{NUMBER:jobid}',
            '^%{START_TIMESTAMP} Running job as user %{WORD:user}',
            '^%{START_TIMESTAMP:endtime} Notifying exit status=%{NUMBER:status} reason=%{NUMBER:reason}'
        ] }
    }






    ruby { code => '

        $source = event.get("source")

        if ! defined?($starttime)
                $starttime = Hash.new
                $starttimebackup = Hash.new
                $jobid = Hash.new
                $submithost = Hash.new
                $user = Hash.new
                $hasuser = Hash.new
                $hasstatus = Hash.new
        end



        if event.get("starttime")

             $starttime[$source] = event.get("starttime")
             $starttimebackup[$source] = event.get("starttime")

             if defined?($hasuser[$source]) && $hasstatus[$source] == false
                     event.set("starttime", $starttimebackup[$source])
                     event.set("jobid", $jobid[$source])
                     event.set("submithost", $submithost[$source])
                     event.set("user", $user[$source])
                     event.set("status", "CRASHED")
             else
                 event.cancel
             end


        elsif event.get("submithost")
            $submithost[$source] = event.get("submithost")
            event.cancel

        elsif event.get("jobid")
            $jobid[$source] = event.get("jobid")
            event.cancel

        elsif event.get("user")
            $user[$source] = event.get("user")
            event.set("starttime", $starttime[$source])
            event.set("jobid", $jobid[$source])
            event.set("submithost", $submithost[$source])
            event.set("user", $user[$source])

            $hasuser[$source] = true
            $hasstatus[$source] = false


        elsif event.get("status")
            event.set("starttime", $starttime[$source])
            event.set("jobid", $jobid[$source])
            event.set("submithost", $submithost[$source])
            event.set("user", $user[$source])

            $hasstatus[$source] = true

        else
            event.cancel
        end

    '}



    mutate { add_field => { "executionhost" => "%{host[name]}" } }
    prune {
        whitelist_names => ["jobid", "user", "submithost", "starttime", "endtime", "status", "reason", "executionhost"]
    }

}



#output {
#    stdout { codec => rubydebug }
#}

output {
    lumberjack {
        codec => json
        hosts => "monitor04.sdcc.bnl.local"
        ssl_certificate => "/etc/logstash/certs/lumberjack.cert"
        ###port => 5005
        port => 5555
    }
}
