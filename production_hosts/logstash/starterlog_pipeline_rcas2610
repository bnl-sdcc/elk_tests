input {
    beats {
        port => "5044"
    }
}

filter {


   
    grok {
        pattern_definitions => { "START_TIMESTAMP" => "%{DATE_US} %{TIME}" }
        match => { "message" => [
            '^%{START_TIMESTAMP:starttime} \*\* PID = ',
            '^%{START_TIMESTAMP} Submitting machine is "%{HOSTNAME:submithost}"',
            '^%{START_TIMESTAMP} Starting a VANILLA universe job with ID: %{NUMBER:jobid}',
            '^%{START_TIMESTAMP} Running job as user %{WORD:user}',
            '^%{START_TIMESTAMP:endtime} Notifying exit status=%{NUMBER:status} reason=%{NUMBER:reason}'
        ] }
    }


    ruby { code => '

        if event.get("starttime")

             @@starttime = event.get("starttime")   
             @@starttimebackup = event.get("starttime")   

             if defined?(@@hasuser)
                 if @@hasstatus == true
                     event.cancel
                 else
                     event.set("starttime", @@starttimebackup)
                     event.set("jobid", @@jobid)
                     event.set("submithost", @@submithost)
                     event.set("user", @@user)
                     event.set("status", "CRASHED")
                 end
             else
                 event.cancel
             end
               
        elsif event.get("submithost")
            @@submithost = event.get("submithost")          
            event.cancel

        elsif event.get("jobid")
            @@jobid = event.get("jobid")
            event.cancel

        elsif event.get("user")
            @@user = event.get("user")
            event.set("starttime", @@starttime)
            event.set("jobid", @@jobid)
            event.set("submithost", @@submithost)
            event.set("user", @@user)

            @@hasuser = true
            @@hasstatus = false


        elsif event.get("status")
            event.set("starttime", @@starttime)
            event.set("jobid", @@jobid)
            event.set("submithost", @@submithost)
            event.set("user", @@user)

            @@hasstatus = true

        else
            event.cancel
        end

    '} 



    mutate { add_field => { "executionhost" => "%{host[name]}" } }
    prune {
        whitelist_names => ["jobid", "user", "submithost", "starttime", "endtime", "status", "reason", "executionhost", "completed"]
    }

}



#output {
#    stdout { codec => rubydebug }
#}

output { 
    lumberjack { 
        codec => json 
        hosts => "monitor04.sdcc.bnl.local" 
        ssl_certificate => "/etc/logstash/certs/lumberjack.cert" 
        ###port => 5005
        port => 5555
    }   
}

